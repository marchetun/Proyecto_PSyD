#include <s3c44b0x.h>
#include <s3cev40.h>
#include <common_types.h>
#include <system.h>
#include <leds.h>
#include <segs.h>
#include <uart.h>
#include <rtc.h>
#include <timers.h>
#include <keypad.h>
#include <lcd.h>
#include <ts.h>
#include <rtc.h>
#include "kernelcoop.h"

/////////////////////////////////////////////////////////////////////////////
// CONFIGURACION
/////////////////////////////////////////////////////////////////////////////

#define MAXPLACES              (10)
#define TICKS_PER_SEC          1000

/////////////////////////////////////////////////////////////////////////////
// Declaracion de tipos
/////////////////////////////////////////////////////////////////////////////

typedef struct
{
    uint32 startTime;   // Hora en la que se ocupó la plaza (en ticks del reloj)
    uint32 endTime;     // Hora en la que expiró la plaza (en ticks del reloj)
    boolean occupied;   // Indica si la plaza está ocupada
} parking_t;

// Declaro esta estructura para añadir estados restantes a la main_task()
typedef enum
{
    WELCOME_SCREEN,     // Estado inicial, muestra pantalla de bienvenida (nuevo demo_waiting)
    SELECT_PLACE,       // Estado de selección de plaza
    SHOW_TARIFF,        // Estado que muestra la tarifa
    ACCEPT_PAYMENT,     // Estado que acepta el pago
    PROCESS_PAYMENT,    // Estado que procesa el pago
    PRINT_TICKET       // Estado que imprime el ticket
} parkingState_t;

/////////////////////////////////////////////////////////////////////////////
// Declaracion de funciones
/////////////////////////////////////////////////////////////////////////////

void setup( void );

uint8 checkSelectedPlace(uint16 x, uint16 y); //Devuelve el índice de la plaza seleccionada según coordenadas.

void plotWelcomeScreen( void );
void showPlaceOccupiedMessage(uint8 placeNum);   	  // Muestra la pantalla con el mensaje de plaza ocupada.
void showTariffScreen(uint8 placeNum, uint16 credit);    // Muestra la pantalla con el mensaje de tarifa.

/////////////////////////////////////////////////////////////////////////////
// Declaracion de tareas
/////////////////////////////////////////////////////////////////////////////

void tsScanTask( void );
void coinsAcceptorTask( void );
void clockTask( void );
void coinsMoverTask( void );
void mainTask( void );
void ticketPrinterTask( void );

/////////////////////////////////////////////////////////////////////////////
// Declaracion de recursos
/////////////////////////////////////////////////////////////////////////////

parking_t parking[MAXPLACES];

struct mbox1 {                /* mailbox donde la coinsAcceptorTask indica a mainTask la moneda introducida */
    boolean flag;
    uint8   cents;
} coinAcceptorMsg;

struct mbox2 {                /* mailbox donde la tsScanTask indica a mainTask la posicion de la pantalla presionada */
    boolean flag;
    uint16  x, y;
} tsPressedMsg;

struct mbox3 {                 /* mailbox donde la mainTask indica a coinsMoverTask si debe aceptar o devolver las monedas introducidas */
    boolean flag;
    boolean accept;
} coinsMoverMsg;

boolean printTicketFlag;    /* mailbox donde la mainTask indica a ticketPrintTask que imprima un ticket */

/*******************************************************************/

void main( void )
{
    sys_init();      
    leds_init();
    segs_init();
    uart0_init();
    rtc_init();
    timers_init();
    keypad_init();
    lcd_init();
    ts_init();

    lcd_on();
    ts_on();

    setup();

    scheduler_init();                       /* Inicializa el kernel */

    create_task( tsScanTask,          5 );    /* Crea las tareas de la aplicacion... */
    create_task( coinsAcceptorTask,   5 );    /* ... el kernel asigna la prioridad segun orden de creacion */
    create_task( mainTask,           10 );    /* ... las tareas mas frecuentes tienen mayor prioridad (criterio Rate-Monotonic-Scheduling) */
    create_task( coinsMoverTask,     10 );
    create_task( clockTask,          10 );
    create_task( ticketPrinterTask,  10 );

    timer0_open_tick( scheduler, TICKS_PER_SEC );  /* Instala scheduler como RTI del timer0  */

    while( 1 )
    {
        sleep();                /* Entra en estado IDLE, sale por interrupcion */
        dispacher();            /* Las tareas preparadas se ejecutan en esta hebra (background) en orden de prioridad */
    }
}

/*******************************************************************/

/* 
** Tarea principal, se activa cada 100 ms muestreando los mensajes enviados de otras tareas y actuando en consecuencia  
*/
void mainTask( void )  
{
    static boolean init = TRUE;
    static parkingState_t state;
    // static enum { demo_waiting, demo_acceptCoins } state; HE SUSTITUIDO ESTO POR ESTRUCTURA MÁS ARRIBA
    static uint16 credit;
    static uint16 ticks;
    static uint8 selectedPlace;

    if( init )
    {
        init   = FALSE;
        plotWelcomeScreen();
        credit = 0;
        state = WELCOME_SCREEN;
    }
    else switch( state )
    {
        case WELCOME_SCREEN:                        /* Estado en donde rechaza monedas y espera la pulsacion de la pantalla */
            if( tsPressedMsg.flag )                    /* Chequea si se ha pulsado la pantalla (mensaje recibido de la tarea tsPressedTask) */
            {
                tsPressedMsg.flag = FALSE;                 /* Marca el mensaje como leido */
                lcd_clear();                               /* Borra pantalla */

                //Preparo cambio de estado a SELECT_PLACE
                lcd_puts(24, 24, BLACK, "Seleccione plaza");
                drawParkingGrid();

                state = SELECT_PLACE;                  /* Salta al estado demo_acceptCoins ... */
                ticks = 500;                               /* ... en el que debera permanecer un maximo de 500 ticks sin no hay actividad */
            }    
            if( coinAcceptorMsg.flag )                /* Chequea si se ha introducido una moneda (mensaje recibido de la tarea coinAcceptorTask) */
            {
                coinAcceptorMsg.flag = FALSE;              /* Marca el mensaje como leido */
                coinsMoverMsg.accept = FALSE;              /* Envia un mensaje para que la moneda se devuelva */
                coinsMoverMsg.flag   = TRUE;
            }    
            break;
        case SELECT_PLACE:                   			/* Estado en donde rechaza monedas y espera la selección de la plaza */
            if( !(--ticks) )                           /* Decrementa ticks y chequea si ha permanecido en este estado el tiempo maximo */
            {
                plotWelcomeScreen();                       /* Visualiza pantalla inicial */
                state = WELCOME_SCREEN;                      /* Salta al estado demo_waiting */
            }
            if( tsPressedMsg.flag )                    /* Chequea si se ha pulsado la pantalla (mensaje recibido de la tarea tsPressedTask) */
            {
                tsPressedMsg.flag = FALSE;                /* Marca el mensaje como leido */

            	//Devuelve en nº de plaza pulsado según las coordenadas
            	selectedPlace = checkSelectedPlace(tsPressedMsg.x, tsPressedMsg.y);

            	if(selectedPlace > 0 && selectedPlace <= MAXPLACES)
            	{
            	    if(!parking[selectedPlace-1].occupied)
            	    {
            	    	showTariffScreen(selectedPlace, credit);
            	        state = SHOW_TARIFF;
            	        ticks = 500;
            	    }
            	    else
            	    {
            	        showPlaceOccupiedMessage(selectedPlace);
            	        ticks = 500;
            	    }
            	}
            }
			// Seguimos rechazando monedas durante la selección de plaza
			if(coinAcceptorMsg.flag)
			{
				coinAcceptorMsg.flag = FALSE;
				coinsMoverMsg.accept = FALSE;
				coinsMoverMsg.flag = TRUE;
			}
			break;
		case SHOW_TARIFF:  // Procesamos monedas introducidas
		    if(!(--ticks)) // Timeout de inactividad (5 segundos)
		    {
		        plotWelcomeScreen();
		        // Devolvemos las monedas introducidas
		        if(credit > 0)
		        {
		            coinsMoverMsg.accept = FALSE;
		            coinsMoverMsg.flag = TRUE;
		        }
		        credit = 0;
		        state = WELCOME_SCREEN;
		    }

		    // Procesamos monedas introducidas
		    if(coinAcceptorMsg.flag)
		    {
		        coinAcceptorMsg.flag = FALSE;	/* Marca el mensaje como leido */

		        // Verificamos que no nos pasemos del máximo (240 céntimos)
		        if(credit + coinAcceptorMsg.cents <= 240)
		        {
		            credit += coinAcceptorMsg.cents;
		            // Actualizar toda la pantalla de tarifa con el nuevo crédito
		            showTariffScreen(selectedPlace, credit);
		            ticks = 500;   /* Restaura el tiempo maximo sin actividad que permanece en este estado */
		        }
		        else
		        {
		            // Si nos pasamos del máximo, devolvemos todas las monedas
		            coinsMoverMsg.accept = FALSE;
		            coinsMoverMsg.flag = TRUE;
		            credit = 0;
		            state = SELECT_PLACE;
		            lcd_clear();
		            lcd_puts(24, 24, BLACK, "Seleccione plaza");
		            drawParkingGrid();
		        }
		    }

		    // Si se pulsa la pantalla, verificamos el crédito
		    if(tsPressedMsg.flag)
		    {
		        tsPressedMsg.flag = FALSE;
	            state = PROCESS_PAYMENT;
		    }
		    break;
		case PROCESS_PAYMENT: // Estado donde se valora el credito introducido una vez se pulsa la pantalla
			if(credit < 20) // Crédito insuficiente
			{
				lcd_clear();
				lcd_puts(24, 48, BLACK, "Saldo insuficiente");
				credit = 0;
				sw_delay_ms(2000);
				selectedPlace = checkSelectedPlace(tsPressedMsg.x, tsPressedMsg.y);
				showTariffScreen(selectedPlace, credit);
				ticks = 500;
			}
			else // Crédito válido, procesamos el pago
			{
				// Aceptamos las monedas antes de procesar el pago
				coinsMoverMsg.accept = TRUE;	 /* Envia un mensaje para que las monedas se acepten */
				coinsMoverMsg.flag = TRUE;
				state = PRINT_TICKET;
			}
			break;
		case PRINT_TICKET:
			break;
    }
}

/* 
** Emula el comportamiento de la impresora de tickets:
**   Cada segundo muestrea si ha recibido un mensaje de la tarea principal enviar a traves de la UART el texto del ticket del aparcamiento elegido
*/
void ticketPrinterTask( void )
{
    static uint32 lastPrintTick = 0;

    // Solo ejecuta la impresión del ticket cada segundo
        if (printTicketFlag) {
            // Enviar el ticket por UART
            uart0_puts("Ticket del parking: 0.10 EUR\n");  // Ejemplo simple
            printTicketFlag = FALSE;  // Resetea el flag de impresión
        }
}

/* 
** Cada segundo visualiza la fecha/hora en la pantalla y libera aquellas plazas cuya hora de finalizacion haya pasado
*/
void clockTask( void )  
{
    static uint32 ticks = 0;
    uint32 i=0;
    ticks++;  // Incrementa el contador cada vez que se llama la tarea

	// Actualiza la visualización de la hora en pantalla
	lcd_clear();
	//Saco la hora
	rtc_time_t rtc_time;
	rtc_gettime(&rtc_time);

	// Formateamos la hora para mostrarla
	   char timeStr[30];
	   sprintf(timeStr, "%02d:%02d:%02d", rtc_time.hour, rtc_time.min, rtc_time.sec);
	   lcd_puts(24, 24, BLACK, timeStr);

	// Liberar plazas de parking cuya hora de finalización haya pasado

	for (; i < MAXPLACES; i++) {
		if (parking[i].occupied) {
			uint32 current_minutes = rtc_time.hour * 60 + rtc_time.min;
			if(current_minutes >= parking[i].endTime) {
				parking[i].occupied = FALSE;  // Marca como libre
				parking[i].startTime = 0;     // Resetea el tiempo de inicio
				parking[i].endTime = 0;       // Resetea el tiempo de finalización
				lcd_clear();
				lcd_puts(24, 48, BLACK,"Plaza Liberada");
			}
		}
	}
}

/* 
** Cada 50 ms muestrea la touchscreen y envia un mensaje a la tarea principal con la posicion del lugar pulsado
*/
void tsScanTask( void )  
{
    static boolean init = TRUE;
    static enum { wait_keydown, scan, wait_keyup } state;
    uint16 x,y;
    if( init )
    {
        init  = FALSE;
        state = wait_keydown;
    }
    else switch( state )
    {
        case wait_keydown:                        /* Estado esperando la presion de la pantalla */
            if( ts_pressed() )                        /* Chequea la pantalla esta presionada */
                state = scan;                         /* Salta al estado scan */
            break;
        case scan:
        	ts_getpos(x,y);                          /* Estado en que escanea la pantalla */
            tsPressedMsg.x = x;             /* Obtiene la posicion X */
            tsPressedMsg.y = y;             /* Obtiene la posicion Y */
            tsPressedMsg.flag = TRUE;                /* Marca el mensaje como valido */
            state = wait_keyup;                      /* Cambia al estado wait_keyup */
            break;
        case wait_keyup:                           /* Estado esperando que se deje de presionar la pantalla */
            if( !ts_pressed() )                     /* Chequea que la pantalla ya no esta presionada */
                state = wait_keydown;                /* Vuelve al estado inicial */
            break;
    }
}

/* 
** Emula el comportamiento de un reconocedor de monedas:
**   Cada 50 ms muestrea el keypad y envia un mensaje a la tarea principal con el valor de la moneda asociada a la tecla
*/
void coinsAcceptorTask( void ) {
	static boolean init = TRUE;
	static enum { wait_keydown, scan, wait_keyup } state;

	if( init )
	{
		init  = FALSE;
		state = wait_keydown;
	}
	else switch( state )
	{
		case wait_keydown:                        /* Estado esperando la presion teclas */
			if( keypad_pressed() )                    /* Chequea si hay una tecla presionada */
				state = scan;                         /* Salta al estado scan */
			break;
		case scan:                                /* Estado en que escanea el teclado */
			switch( keypad_scan() )                   /* Lee el teclado */
			{
				case KEYPAD_KEYF:                         /* La tecla F esta asociada a la moneda de 0,10 euros */
					coinAcceptorMsg.cents = 10;           /* Envia un mensaje con el valor de la moneda */
					coinAcceptorMsg.flag  = TRUE;
					break;
				case KEYPAD_KEYE:                         /* La tecla E esta asociada a la moneda de 0,20 euros */
					coinAcceptorMsg.cents = 20;           /* Envia un mensaje con el valor de la moneda */
					coinAcceptorMsg.flag  = TRUE;
					break;
				case KEYPAD_KEYD:                         /* La tecla D esta asociada a la moneda de 0,50 euros */
					coinAcceptorMsg.cents = 50;           /* Envia un mensaje con el valor de la moneda */
					coinAcceptorMsg.flag  = TRUE;
					break;
				case KEYPAD_KEYC:                         /* La tecla C esta asociada a la moneda de 1,00 euros */
					coinAcceptorMsg.cents = 100;           /* Envia un mensaje con el valor de la moneda */
					coinAcceptorMsg.flag  = TRUE;
					break;
			}
			state = wait_keyup;                       /* Salta al estado wait_keyup */
			break;
		case wait_keyup:                          /* Estado esperando la depresion de teclas  */
			if( !keypad_pressed() )                   /* Chequea si la tecla ya no esta presionada */
				state = wait_keydown;                     /* Salta al estado wait_keydown */
			break;
	}
}

/* 
** Emula el comportamiento del dispositivo que envia las monedas a la alcancia o al cajetin de devolucion:
**   Cada 100 ms muestrea si ha recibido un mensaje de la tarea principal para mover monedas
**   Si van a la alcancia activa durante 1 s los leds y muestra una A en los segs
**   Si van al cajetin de devolucion activa durante 1 segundo los leds y muestra una D en los segs
*/
void coinsMoverTask( void ) 
{
    static boolean init = TRUE;
    static enum { off, on } state;
    static uint32 ticks;

    if( init )
    {
        init  = FALSE;
        state = off;
    }
    else switch( state )
    {
        case off:                                /* Estado con leds y 7-segs apagados */
            if( coinsMoverMsg.flag )                /* Chequea si ha recibido mensaje */
            {
                coinsMoverMsg.flag = FALSE;            /* Marca el mensaje como leido */
                if( coinsMoverMsg.accept )             /* Muestra el mensaje que corresponda en segs */
                    segs_putchar( 0xA );
                else
                    segs_putchar( 0xD );
                led_on( LEFT_LED );                    /* Enciende leds */
                led_on( RIGHT_LED );
                state = on;                            /* Salta al estado on ... */
                ticks = 10;                            /* ... en el que debera permanecer 10 ticks */
            }
            break;
        case on:                                /* Estado con leds y 7-segs encendidos */
            if( !(--ticks) )                        /* Decrementa ticks y chequea si ha permanecido en este estado el tiempo requerido */
            {
                segs_off();                            /* Apaga segs */
                led_off( LEFT_LED );                   /* Apaga leds */
                led_off( RIGHT_LED );
                state = off;                           /* Salta al estado off */
            }
            break;
    }
}

/*******************************************************************/

void setup( void )
{
    // Inicialización de variables o configuraciones necesarias
	int i;
    for (i = 0; i < MAXPLACES; i++) {
        parking[i].occupied = FALSE;
    }
    coinAcceptorMsg.flag  = FALSE;
	coinAcceptorMsg.cents = 0;

	tsPressedMsg.flag     = FALSE;
	tsPressedMsg.x        = 0;
	tsPressedMsg.y        = 0;

	coinsMoverMsg.flag    = FALSE;
	coinsMoverMsg.accept  = FALSE;
    printTicketFlag = FALSE;
}

/*******************************************************************/

void plotWelcomeScreen(void) {
    lcd_clear();

    // Mensaje principal centrado
    lcd_puts(24, 24, BLACK, "Pulse la pantalla");
    lcd_puts(24, 40, BLACK, "para comenzar");

    // Dibujamos el rectángulo para el horario
    lcd_draw_box(20, 70, 300, 200, BLACK, 1);

    // Título del horario centrado
    lcd_puts(70, 80, BLACK, "HORARIO DE FUNCIONAMIENTO");

    // Horarios
    lcd_puts(24, 100, BLACK, "dom: gratis            jue: 09:00-21:00");
    lcd_puts(24, 120, BLACK, "lun: 09:00-21:00       vie: 09:00-21:00");
    lcd_puts(24, 140, BLACK, "mar: 09:00-21:00       sab: 09:00-15:00");
    lcd_puts(24, 160, BLACK, "mie: 09:00-21:00");
}

//Función que pinta la selección de plazas displonibles.
void drawParkingGrid(void) {
    uint16 x, y;
    uint8 placeNum = 1;

    //Dibujo las plazas (2 de altura, 4 de ancho)
    for(y = 0; y < 2; y++)
    {
        for(x = 0; x < 4; x++)
        {
            uint16 xPos = 24 + (x * 60);
            uint16 yPos = 48 + (y * 60);

            // Dibujamos el rectángulo de la plaza usando lcd_draw_box
            // Los parámetros son: xleft, yup, xright, ydown, color, width
            lcd_draw_box(xPos, yPos, xPos + 50, yPos + 50, BLACK, 1);

            // Si la plaza está ocupada, mostramos una X
            if(parking[placeNum-1].occupied)
            {
                // Usamos puts normal ya que no necesitamos tamaño doble para la X
                lcd_puts(xPos + 20, yPos + 20, BLACK, "X");
            }

            // Número de plaza
            char numStr[2];
            numStr[0] = '0' + placeNum;
            numStr[1] = '\0';
            // Usamos puts normal para el número
            lcd_puts(xPos + 20, yPos + 15, BLACK, numStr);

            placeNum++;
        }
    }
}

uint8 checkSelectedPlace(uint16 x, uint16 y) {
    uint8 col = (x - 24) / 60;
    uint8 row = (y - 48) / 60;

    // Verificamos que el toque esté dentro de los límites
    if(col >= 0 && col < 4 && row >= 0 && row < 2)
    {
        return (row * 4) + col + 1;
    }

    return 0; // Retorna 0 si no se seleccionó ninguna plaza válida
}

void showPlaceOccupiedMessage(uint8 placeNum) {
    lcd_clear();

    // Primera línea: "Plaza X ocupada"
    char plazaStr[20];
    sprintf(plazaStr, "Plaza %d ocupada", placeNum);
    lcd_puts(24, 48, BLACK, plazaStr);

    // Segunda línea: "Fin: dia,fecha hora"
    rtc_time_t endTime;
    rtc_gettime(&endTime);  // Obtenemos la hora de finalización

    // Array para convertir número de día a texto abreviado
    const char* dias[] = {"dom", "lun", "mar", "mie", "jue", "vie", "sab"};

    char timeStr[30];
    sprintf(timeStr, "Fin: %s,%02d/%02d/%02d %02d:%02d",
            dias[endTime.wday-1],  // -1 porque wday va de 1-7
            endTime.mday,
            endTime.mon,
            endTime.year,
            endTime.hour,
            endTime.min);

    lcd_puts(24, 76, BLACK, timeStr);

    sw_delay_ms(2000);

    lcd_clear();
    lcd_puts(24, 24, BLACK, "Seleccione plaza");
    drawParkingGrid();
}

void showTariffScreen(uint8 placeNum, uint16 credit) {
    lcd_clear();

    // Rectángulo para la tarifa
    lcd_draw_box(20, 40, 300, 130, BLACK, 1);

    // Título centrado
    lcd_puts(130, 48, BLACK, "TARIFA");

    // Información de tarifa dentro del rectángulo
    lcd_puts(24, 72, BLACK, "Precio por minuto: 0,01 euros");
    lcd_puts(24, 96, BLACK, "Estancia minima:  20 minutos");
    lcd_puts(24, 120, BLACK, "Estancia maxima: 240 minutos");

    // Información de la plaza
    char plazaStr[20];
    sprintf(plazaStr, "Plaza %d", placeNum);
    lcd_puts_x2(24, 150, BLACK, plazaStr);

    // Crédito y mensajes finales
    char creditStr[20];
    sprintf(creditStr, "Credito: %.2f euros", credit/100.0);
    lcd_puts(24, 180, BLACK, creditStr);
    lcd_puts(24, 204, BLACK, "Inserte monedas");
    lcd_puts(24, 228, BLACK, "Pulse la pantalla para aceptar");
}
